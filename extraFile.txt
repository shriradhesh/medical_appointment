
patient Schema  : 

CREATE TABLE `medical_appoinment`.`patient` (`id` INT(20) NOT NULL AUTO_INCREMENT , `FirstName` VARCHAR(255) NOT NULL , `LastName` VARCHAR(255) NOT NULL , `DOB` VARCHAR(20) NOT NULL , `Gender` ENUM('male','female','others','') NOT NULL , `Address` VARCHAR(200) NOT NULL , `Email` VARCHAR(200) NOT NULL , `Password` VARCHAR(200) NOT NULL , `Phone_no` VARCHAR(200) NOT NULL , `Emergency_Contact` VARCHAR(200) NOT NULL , `Relationship_to_Patient` VARCHAR(200) NOT NULL , PRIMARY KEY (`id`), UNIQUE `Email` (`Email`(50))) ENGINE = InnoDB;



	const express = require('express');
const QRCode = require('qrcode');
const fs = require('fs');

const app = express();
app.use(express.json());

// Endpoint to generate an appointment number with a QR code
app.post('/generate-appointment-qrcode', async (req, res) => {
  try {
    const { appointmentNumber } = req.body;

    // Generate QR code
    const qrCodeDataURL = await QRCode.toDataURL(appointmentNumber);

    // Save the QR code image (optional)
    const qrCodeImageFilename = `${appointmentNumber}.png`;
    await QRCode.toFile(qrCodeImageFilename, appointmentNumber);

    // Return the QR code data and optionally the image filename
    res.status(200).json({
      success: true,
      message: 'Appointment QR code generated successfully',
      qrCodeDataURL,
      qrCodeImageFilename,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Error while generating appointment QR code',
    });
  }
});

// Start the Express server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});




 const express = require('express');
const router = express.Router();
const mysql = require('mysql');

// MySQL database connection configuration
const con = mysql.createConnection({
  host: 'your-mysql-host',
  user: 'your-mysql-user',
  password: 'your-mysql-password',
  database: 'your-mysql-database',
});

// Validate input data function
function validateScheduleData(data) {
  const { doctorId, scheduleDate, startTime, endTime, scheduleType, availability } = data;

  if (!doctorId || !scheduleDate || !startTime || !endTime || !scheduleType || !availability) {
    return false;
  }

  // Additional validation logic can be added here as needed

  return true;
}

// Define a route to create a schedule for a doctor
router.post('/create-schedule', async (req, res) => {
  try {
    const scheduleData = req.body;

    // Validate input data
    if (!validateScheduleData(scheduleData)) {
      return res.status(400).json({ success: false, error: 'Invalid schedule data' });
    }

    // Insert the schedule record into the doctor_schedules table
    const insertSql = `
      INSERT INTO doctor_schedules (doctorId, scheduleDate, startTime, endTime, scheduleType, availability)
      VALUES (?, ?, ?, ?, ?, ?)
    `;

    const insertValues = [
      scheduleData.doctorId,
      scheduleData.scheduleDate,
      scheduleData.startTime,
      scheduleData.endTime,
      scheduleData.scheduleType,
      scheduleData.availability,
    ];

    // Execute the SQL query to insert the schedule
    con.query(insertSql, insertValues, (error, result) => {
      if (error) {
        console.error('Error creating doctor schedule:', error);
        return res.status(500).json({ success: false, error: 'Error while creating doctor schedule' });
      }

      res.status(201).json({ success: true, message: 'Doctor schedule created successfully' });
    });
  } catch (error) {
    console.error('Error in creating doctor schedule:', error);
    res.status(500).json({ success: false, error: 'There is an error' });
  }
});

// Start the MySQL connection
con.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    throw err;
  }
  console.log('Connected to MySQL database');
});

module.exports = router;

