
patient Schema  : 

CREATE TABLE `medical_appoinment`.`patient` (`id` INT(20) NOT NULL AUTO_INCREMENT , `FirstName` VARCHAR(255) NOT NULL , `LastName` VARCHAR(255) NOT NULL , `DOB` VARCHAR(20) NOT NULL , `Gender` ENUM('male','female','others','') NOT NULL , `Address` VARCHAR(200) NOT NULL , `Email` VARCHAR(200) NOT NULL , `Password` VARCHAR(200) NOT NULL , `Phone_no` VARCHAR(200) NOT NULL , `Emergency_Contact` VARCHAR(200) NOT NULL , `Relationship_to_Patient` VARCHAR(200) NOT NULL , PRIMARY KEY (`id`), UNIQUE `Email` (`Email`(50))) ENGINE = InnoDB;



	const express = require('express');
const QRCode = require('qrcode');
const fs = require('fs');

const app = express();
app.use(express.json());

// Endpoint to generate an appointment number with a QR code
app.post('/generate-appointment-qrcode', async (req, res) => {
  try {
    const { appointmentNumber } = req.body;

    // Generate QR code
    const qrCodeDataURL = await QRCode.toDataURL(appointmentNumber);

    // Save the QR code image (optional)
    const qrCodeImageFilename = `${appointmentNumber}.png`;
    await QRCode.toFile(qrCodeImageFilename, appointmentNumber);

    // Return the QR code data and optionally the image filename
    res.status(200).json({
      success: true,
      message: 'Appointment QR code generated successfully',
      qrCodeDataURL,
      qrCodeImageFilename,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Error while generating appointment QR code',
    });
  }
});

// Start the Express server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});




   ....
get apoointments
    ...


const express = require('express');
const router = express.Router();

const seeAppointments = async (req, res) => {
  try {
    const doctorId = req.params.doctorId;

    // Check if the dateRange query parameter is provided
    const dateRange = req.query.dateRange;

    let dateFilter = '';
    let startDate, endDate;

    switch (dateRange) {
      case 'week':
        startDate = new Date();
        endDate = new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);
        break;

      case 'day':
        startDate = new Date();
        endDate = new Date(startDate.getTime() + 24 * 60 * 60 * 1000);
        break;

      case 'month':
        startDate = new Date();
        endDate = new Date(startDate.getTime() + 30 * 24 * 60 * 60 * 1000);
        break;

      default:
        break;
    }

    if (startDate && endDate) {
      dateFilter = `A.Appointment_Date >= '${startDate.toISOString().slice(0, 10)}' AND A.Appointment_Date < '${endDate.toISOString().slice(0, 10)}'`;
    }

    const query = `
      SELECT A.*, P.*
      FROM appointments AS A
      INNER JOIN patient AS P ON A.patientId = P.patientId
      WHERE A.doctorId = ? ${dateFilter}
    `;

    con.query(query, [doctorId], (error, result) => {
      if (error) {
        console.error('Error while executing SQL query:', error);
        res.status(500).json({
          success: false,
          error: 'Error While fetching Appointment',
        });
      } else {
        res.status(200).json({
          success: true,
          message: 'Filtered Appointment Details',
          Appointment_Details: result,
        });
      }
    });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({
      success: false,
      error: 'There is an error',
    });
  }
};

