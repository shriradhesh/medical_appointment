const View_Appointments = async (req, res) => {
    try {
        const { patientId } = req.body;

        // Retrieve the patient's upcoming appointments
        const today = new Date();
        const formattedToday = today.toISOString().split('T')[0]; // Get the current date in 'YYYY-MM-DD' format

        const viewAppointmentsSql = `
            SELECT *
            FROM appointments
            WHERE patientId = ?
            AND Appointment_Date >= ?
            ORDER BY Appointment_Date, Appointment_StartTime
        `;

        const viewAppointmentsValues = [patientId, formattedToday];

        con.query(viewAppointmentsSql, viewAppointmentsValues, async (error, results) => {
            if (error) {
                console.error('Error fetching patient appointments:', error);
                res.status(500).json({ success: false, error: 'Error while fetching patient appointments' });
                return;
            }

            // Prepare alerts for upcoming appointments
            const upcomingAppointments = results.map(appointment => {
                const appointmentDate = new Date(appointment.Appointment_Date);
                const today = new Date();
                const timeDifference = appointmentDate - today;
                const daysUntilAppointment = Math.floor(timeDifference / (1000 * 3600 * 24));

                return {
                    appointmentId: appointment.id,
                    doctorId: appointment.doctorId,
                    Appointment_Date: appointment.Appointment_Date,
                    Appointment_StartTime: appointment.Appointment_StartTime,
                    daysUntilAppointment,
                };
            });

            res.status(200).json({
                success: true,
                message: 'Patient appointments retrieved successfully',
                upcomingAppointments,
            });
        });
    } catch (error) {
        console.error('Error in viewing patient appointments:', error);
        res.status(500).json({ success: false, error: 'There is an error' });
    }
}



   .........

....
  .........
const express = require('express');
const mysql = require('mysql');
const cron = require('node-cron');
const twilio = require('twilio');

const app = express();

// MySQL database connection configuration
const con = mysql.createConnection({
    host: 'your-mysql-host',
    user: 'your-mysql-username',
    password: 'your-mysql-password',
    database: 'your-mysql-database',
});

con.connect(err => {
    if (err) {
        console.error('Error connecting to the database: ' + err.message);
        return;
    }
    console.log('Connected to the database');
});

// Configure your Twilio credentials
const twilioClient = twilio('YOUR_TWILIO_ACCOUNT_SID', 'YOUR_TWILIO_AUTH_TOKEN');
const twilioPhoneNumber = 'YOUR_TWILIO_PHONE_NUMBER';

// Schedule a cron job to run every minute
cron.schedule('* * * * *', () => {
    sendAppointmentAlerts();
});

async function sendAppointmentAlerts() {
    // Calculate the alert time (3 hours before the current time)
    const currentTime = new Date();
    const alertTime = new Date(currentTime.getTime() + 3 * 60 * 60 * 1000);

    // Query the database to find appointments that match the criteria
    const query = `SELECT * FROM appointments WHERE Appointment_StartTime <= ?`;
    const values = [alertTime];

    con.query(query, values, async (error, appointments) => {
        if (error) {
            console.error('Error querying appointments: ' + error.message);
            return;
        }

        // Send SMS alerts to patients for the upcoming appointments
        appointments.forEach(appointment => {
            sendSMSToPatient(appointment, '+1234567890'); // Replace with the patient's mobile number
        });
    });
}

function sendSMSToPatient(appointment, patientPhoneNumber) {
    // Use Twilio to send SMS alerts to patients
    twilioClient.messages.create({
        body: `Your appointment with ${appointment.doctorId} is scheduled for ${appointment.Appointment_StartTime}.`,
        from: twilioPhoneNumber,
        to: patientPhoneNumber,
    })
    .then(message => console.log('SMS sent:', message.sid))
    .catch(error => console.error('Error sending SMS:', error));
}

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});






.....


const login = async (req, res) => {
    const { email, password, userType } = req.body;

    // Define the column names based on userType
    const emailColumn = userType === 'patient' ? 'Email' : 'email';
    const passwordColumn = userType === 'patient' ? 'Password' : 'password';

    // Define the SQL query based on userType
    const sql = userType === 'patient' ? 'SELECT * FROM patient WHERE Email = ?' : 'SELECT * FROM doctor WHERE email = ?';

    con.query(sql, [email], function (error, results) {
        if (error) {
            res.status(500).json({ success: false, message: 'Error querying the database' });
        } else {
            if (results.length === 0) {
                res.status(401).json({ success: false, message: 'Email not found' });
            } else {
                const hashedPassword = results[0][passwordColumn];

                bcrypt.compare(password, hashedPassword, function (error, isMatch) {
                    if (error) {
                        res.status(500).json({ success: false, message: 'Error comparing passwords' });
                    } else if (!isMatch) {
                        res.status(401).json({ success: false, message: 'Incorrect password' });
                    } else {
                        // Set the session based on userType
                        req.session.user = results[0];

                        // Log a message to the console
                        console.log(`${userType} session generated:`, results[0]);

                        // Passwords match, login successful
                        res.status(200).json({
                            success: true,
                            message: `${userType} logged in successfully`,
                            user_details: results[0],
                        });
                    }
                });
            }
        }
    });
};


   ...............
------------------->
   ...............


const cancelAppointmentsForDate = async (req, res) => {
    try {
        const doctorId = req.params.doctorId;
        const cancelDate = req.body.cancelDate; // Assuming you send the cancel date in the request body

        if (!cancelDate) {
            res.status(400).json({
                success: false,
                message: 'Please provide a cancelDate in the request body.',
            });
            return;
        }

        // Construct a SQL query to delete appointments for the specified doctor on the given date
        const query = `
            DELETE FROM appointments
            WHERE doctorId = ? AND DATE(Appointment_Date) = ?
        `;
        const queryParams = [doctorId, cancelDate];

        // Execute the query using your database connection
        con.query(query, queryParams, (error, result) => {
            if (error) {
                console.error('Error while executing SQL query:', error);
                res.status(500).json({
                    success: false,
                    message: 'Error while canceling appointments',
                });
            } else {
                res.status(200).json({
                    success: true,
                    message: 'Appointments for the specified date canceled successfully.',
                });
            }
        });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({
            success: false,
            message: 'There is an error',
        });
    }
};



   ....................
    ......................

const twilio = require('twilio');

// Twilio credentials
const accountSid = 'YOUR_ACCOUNT_SID';
const authToken = 'YOUR_AUTH_TOKEN';
const client = new twilio(accountSid, authToken);

const sendCancellationMessage = (patientId, doctorId, cancelDate) => {
    // Fetch patient's phone number based on patientId from your database
    const patientPhoneNumber = 'REPLACE_WITH_PATIENT_PHONE_NUMBER';

    const from = 'YOUR_PHONE_NUMBER'; // Your Twilio phone number
    const to = patientPhoneNumber; // Recipient's phone number
    const body = `Your appointment with doctor ${doctorId} on ${cancelDate} has been canceled.`;

    // Send SMS using Twilio
    client.messages.create({ body, from, to })
        .then((message) => {
            console.log(`Cancellation message sent to ${to}: ${message.sid}`);
        })
        .catch((error) => {
            console.error('Error sending SMS:', error);
        });
};

// Rest of the cancelAppointmentsForDate function remains the same


